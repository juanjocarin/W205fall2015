from __future__ import absolute_import, print_function, unicode_literals

import re
from streamparse.bolt import Bolt

################################################################################
# Function to check if the string contains only ascii chars
################################################################################
def ascii_string(s):
  return all(ord(c) < 128 for c in s)

class ParseTweet(Bolt):

    def process(self, tup):
        tweet = tup.values[0]  # extract the tweet

        # Split the tweet into words
        words = tweet.split()

        # Filter out the hash tags, RT, @ and urls
        valid_words = []
        for word in words:

            # Filter the hash tags
            if word.startswith("#"): continue

            # Filter the user mentions
            if word.startswith("@"): continue

            # Filter out retweet tags
            if word.startswith("RT"): continue

            # Filter out the urls
            if word.startswith("http"): continue

            # Strip leading and lagging punctuations
            aword = word.strip("\"?><,'.:;)")
	    
            # STRIP ALL PUNCTUATIONS EXCEPT APOSTROPHES
 #           aword = re.sub(r"[_,!\-\"\\\/}{&?\.]",'', aword).strip()

            # CONVERT TO LOWERCASE
#            aword = aword.lower()

            # FILTER STOP WORDS (COMMON WORDS THAT DO NOT ADD VALUE)
            #stop_words = [line.rstrip('\n') for line in open('english')]
            #stop_words = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 
            #    'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 
            #    'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself',
            #    'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 
            #    'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 
            #    'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 
            #    'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 
            #    'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 
            #    'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 
            #    'with', 'about', 'against', 'between', 'into', 'through', 
            #    'during', 'before', 'after', 'above', 'below', 'to', 'from', 
            #    'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 
            #    'again', 'further', 'then', 'once', 'here', 'there', 'when', 
            #    'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 
            #    'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 
            #    'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 
            #    'can', 'will', 'just', 'don', 'should', 'now', '']


            # now check if the word contains only ascii
            if len(aword) > 0 and ascii_string(word): # and \
#                aword not in set(stop_words):
                valid_words.append([aword])

        if not valid_words: return

        # Emit all the words
        self.emit_many(valid_words)

        # tuple acknowledgement is handled automatically
